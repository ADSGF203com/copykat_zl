library(copycat)
??copycat
?copycat
help(copycat)
devtools::load_all(".")
library(copycat)
devtools::document()
getwd()
devtools::document()
devtools::document()
devtools::document()
library(copycat)
devtools::document()
?copycat
??copycat
help(copycat)
devtools::document()
help(copycat)
devtools::document()
help(baseline.norm.cl)
help(baseline.norm.cl)
devtools::document()
install.packages("rmarkdown")
getwd()
devtools::use_vignette("copycat")
library(rmarkdown)
library(rmarkdown)
devtools::use_vignette("copycat")
devtools::use_vignette("my-vignette")
use_vignette("copycat")
library(devtools)
library(rmarkdown)
use_vignette("copycat")
use_vignette("copycat-vignettes")
rawdatamat <- read.delim("~/Downloads/COPYKAT-master-2/example_inputs/exp.rawUMI.matrix.txt", header = TRUE)
devtools::use_data(rawdatamat, rawdatamat)
devtools::use_data(rawdatamat, rawdatamat)
library(devtools)
devtools::use_data(rawdatamat, rawdatamat)
use_data(rawdatamat, rawdatamat)
use_data(rawdatamat, exp.rawdata)
?use_data
exp.rawdata <- read.delim("~/Downloads/COPYKAT-master-2/example_inputs/exp.rawUMI.matrix.txt", header = TRUE)
use_data(exp.rawdatamat)
use_data(exp.rawdata)
exp.known.norm <- read.delim("~/Downloads/COPYKAT-master-2/example_inputs/exp.list.normal.txt", header = TRUE)
use_data(exp.known.norm)
exp.rawdata <- read.delim("../data_raw/exp.rawdata.txt", header = TRUE)
getwd()
exp.rawdata <- read.delim("~/data_raw/exp.rawdata.txt", header = TRUE)
exp.rawdata <- read.delim("./data_raw/exp.rawdata.txt", header = TRUE)
exp.known.norm <- read.delim("./data_raw/exp.known.norm.txt", header = TRUE)
use_data(exp.rawdata)
use_data(exp.known.norm)
use_data_raw()
exp.rawdata <- read.delim("./data-raw/exp.rawdata.txt", header = TRUE)
exp.known.norm <- read.delim("./data-raw/exp.known.norm.txt", header = TRUE)
use_data(exp.rawdata)
use_data(exp.known.norm)
use_data_raw()
dim(exp.rawdata)
?exp.rawdata
??exp.rawdata
help(exp.rawdata)
full.anno <- read.delim("/volumes/lab/users/ruligao/Man_COPYCAT/codes_copycat/support_database/gencode.v28.annotation.abs.band.bed", header = TRUE, stringsAsFactors=FALSE)
full.anno <- read.delim("./data-raw/gencode.v28.annotation.abs.band.bed", header = TRUE, stringsAsFactors=FALSE)
cyclegenes <- read.delim("./data-raw/c5.all.v6.2.cyclegene.txt", header = TRUE)
DNA.hg20 <- read.delim("./data-raw/bin.12205.200kb.bund.txt", header = TRUE,stringsAsFactors = FALSE)
use_data(full.anno, internal = TRUE)
use_data(cyclegenes, internal = TRUE)
use_data(DNA.hg20, internal = TRUE)
use_data(c(full.anno,cyclegenes,DNA.hg20), internal = TRUE)
?use_data
use_data(full.anno,cyclegenes,DNA.hg20, internal = TRUE,overwrite = FALSE)
use_data(full.anno,cyclegenes,DNA.hg20, internal = TRUE,overwrite = FALSE)
use_data_raw()
library(copycat)
copycat.test <- copycat(rawmat=exp.rawdata, id.type="S", ngene.chr=5, win.size=25, KS.cut=0.3, sam.name="test", n.cores=4)
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
library(copycat)
copycat.test <- copycat(rawmat=exp.rawdata, id.type="S", ngene.chr=5, win.size=25, KS.cut=0.3, sam.name="test", n.cores=4)
exp.rawdata <- read.delim("./data-raw/exp.rawdata.txt", header = TRUE)
use_data(exp.rawdata)
use_data(exp.rawdata)
dim(exp.rawdata)
library(copycat)
copycat.test <- copycat(rawmat=exp.rawdata, id.type="S", ngene.chr=5, win.size=25, KS.cut=0.3, sam.name="test", n.cores=4)
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
library(copycat)
copycat.test <- copycat(rawmat=exp.rawdata, id.type="S", ngene.chr=5, win.size=25, KS.cut=0.3, sam.name="test", n.cores=4)
annotateGenes.hg20 <- function(mat=matx, ID.type="ENSEMBLE_id", full.anno = full.anno){
print("start annotation ...")
if(substring(ID.type,1,1) %in% c("E", "e")){
shar <- intersect(rownames(mat), full.anno$ensembl_gene_id)
mat <- mat[which(rownames(mat) %in% shar),]
anno <- full.anno[which(as.vector(full.anno$ensembl_gene_id) %in% shar),]
anno <- anno[!duplicated(anno$hgnc_symbol),]
anno <- anno[order(match(anno$ensembl_gene_id, rownames(mat))),]
data <- cbind(anno, mat)
}else if(substring(ID.type,1,1) %in% c("S", "s")) {
shar <- intersect(rownames(mat), full.anno$hgnc_symbol)
mat <- mat[which(rownames(mat) %in% shar),]
anno <- full.anno[which(as.vector(full.anno$hgnc_symbol) %in% shar),]
anno <- anno[!duplicated(anno$hgnc_symbol),]
anno <- anno[order(match(anno$hgnc_symbol, rownames(mat))),]
data <- cbind(anno, mat)
}
}
source('~/Desktop/creat_copycat_pkg/copycat/R/annotateGenes.hg20.R')
copycat.test <- copycat(rawmat=exp.rawdata, id.type="S", ngene.chr=5, win.size=25, KS.cut=0.3, sam.name="test", n.cores=4)
library(copycat)
copycat.test <- copycat(rawmat=exp.rawdata, id.type="S", ngene.chr=5, win.size=25, KS.cut=0.3, sam.name="test", n.cores=4)
mat=matx
#'
#' @param mat data matrix; genes in rows; cell names in columns.
#' @param ID.type gene id type: Symbol or Ensemble.
#' @param full.anno annotation file for all known genes, automatically loaded in copycat.
#'
#' @return annotations of each genes in rows with chrom and positions.
#'
#' @examples
#' test.anno.mat <- annotateGenes.hg20(mat=matx, ID.type="ENSEMBLE_id", full.anno = full.anno)
#'
head(full.anno)
rawmat=exp.rawdata
sam.name="test"
n.cores=4
sample.name <- paste(sam.name,"_copycat_", sep="")
start_time <- Sys.time()
if (!substring(id.type,1,1) %in% c("E", "e", "S","s")) stop("ID types are not: ensemble, ENSEMBLE, symbol, SYMBOL")
id.type="S"
print(paste(nrow(rawmat), " genes, ", ncol(rawmat), " cells in raw data", sep=""))
genes.raw <- apply(rawmat, 2, function(x)(sum(x>0)));
if(sum(genes.raw> 200)==0) stop("none cells have more than 200 genes")
if(sum(genes.raw<200)>1){
rawmat <- rawmat[, -which(genes.raw< 200)];
print(paste("filtered out ", sum(genes.raw<=200), " cells with less than 200 genes; remaining ", ncol(rawmat), " cells", sep=""))
}
##
der<- apply(rawmat,1,function(x)(sum(x>0)))/ncol(rawmat);
if(sum(der>LOW.DR)>=1){
rawmat <- rawmat[which(der > LOW.DR), ]; print(paste(nrow(rawmat)," genes past LOW.DR filtering", sep=""))
}
LOW.DR=0.1
UP.DR=0.2
if(sum(der>LOW.DR)>=1){
rawmat <- rawmat[which(der > LOW.DR), ]; print(paste(nrow(rawmat)," genes past LOW.DR filtering", sep=""))
}
WNS1 <- "data quality is ok"
if(nrow(rawmat) < 8000){
WNS1 <- "low data quality"
UP.DR<- LOW.DR
print("WARNING: low data quality; assigned LOW.DR to UP.DR...")
}
print("step 2: annotations gene coordinates ...")
mat = rawmat
id.type)
id.type
ID.type = id.type
print("start annotation ...")
if(substring(ID.type,1,1) %in% c("E", "e")){
shar <- intersect(rownames(mat), full.anno$ensembl_gene_id)
mat <- mat[which(rownames(mat) %in% shar),]
anno <- full.anno[which(as.vector(full.anno$ensembl_gene_id) %in% shar),]
anno <- anno[!duplicated(anno$hgnc_symbol),]
anno <- anno[order(match(anno$ensembl_gene_id, rownames(mat))),]
data <- cbind(anno, mat)
}else if(substring(ID.type,1,1) %in% c("S", "s")) {
shar <- intersect(rownames(mat), full.anno$hgnc_symbol)
mat <- mat[which(rownames(mat) %in% shar),]
anno <- full.anno[which(as.vector(full.anno$hgnc_symbol) %in% shar),]
anno <- anno[!duplicated(anno$hgnc_symbol),]
anno <- anno[order(match(anno$hgnc_symbol, rownames(mat))),]
data <- cbind(anno, mat)
}
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
anno.mat <- annotateGenes.hg20(mat = rawmat, ID.type = id.type) #SYMBOL or ENSEMBLE
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/annotateGenes.hg20.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/annotateGenes.hg20.R')
anno.mat <- annotateGenes.hg20(mat = rawmat, ID.type = id.type) #SYMBOL or ENSEMBLE
print(paste(nrow(anno.mat)," genes annotated", sep=""))
copycat.test <- copycat(rawmat=exp.rawdata, id.type="S", ngene.chr=5, win.size=25, KS.cut=0.3, sam.name="test", n.cores=4)
source('~/Desktop/creat_copycat_pkg/copycat/R/baseline.GMM.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
copycat.test <- copycat(rawmat=exp.rawdata, id.type="S", ngene.chr=5, win.size=25, KS.cut=0.3, sam.name="test", n.cores=4)
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
devtools::load_all(".")
copycat.test <- copycat(rawmat=exp.rawdata, id.type="S", ngene.chr=5, win.size=25, KS.cut=0.3, sam.name="test", n.cores=4)
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
library(copycat)
copycat.test <- copycat(rawmat=exp.rawdata, id.type="S", ngene.chr=5, win.size=25, KS.cut=0.3, sam.name="test", n.cores=4)
exp.rawdata <- read.delim("./data-raw/exp.rawdata.txt", header = TRUE)
head(exp.rawdata[,1:5])
c(1:100,300:400, 800:900)
exp.rawdata <- exp.rawdata[,c(1:100,300:400, 800:900)]
dim(exp.rawdata)
use_data(exp.rawdata, overwrite = TRUE)
use_data_raw()
devtools::load_all(".")
library(copycat)
copycat.test <- copycat(rawmat=exp.rawdata, id.type="S", ngene.chr=5, win.size=25, KS.cut=0.3, sam.name="test", n.cores=4)
source('~/Desktop/creat_copycat_pkg/copycat/R/baseline.GMM.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/baseline.GMM.R')
devtools::load_all(".")
library(copycat)
copycat.test <- copycat(rawmat=exp.rawdata, id.type="S", ngene.chr=5, win.size=25, KS.cut=0.3, sam.name="test", n.cores=4)
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
rawmat=exp.rawdata
id.type="S"
ngene.chr=5
win.size=25
KS.cut=0.3
sam.name="test"
n.cores=4
LOW.DR=0.1
UP.DR=0.2
ngene.chr=0
sample.name <- paste(sam.name,"_copycat_", sep="")
start_time <- Sys.time()
print("step1: read and filter data ...")
print(paste(nrow(rawmat), " genes, ", ncol(rawmat), " cells in raw data", sep=""))
genes.raw <- apply(rawmat, 2, function(x)(sum(x>0)));
if(sum(genes.raw> 200)==0) stop("none cells have more than 200 genes")
genes.raw <- apply(rawmat, 2, function(x)(sum(x>0)));
if(sum(genes.raw> 100)==0) stop("none cells have more than 200 genes")
if(sum(genes.raw<100)>1){
rawmat <- rawmat[, -which(genes.raw< 200)];
print(paste("filtered out ", sum(genes.raw<=200), " cells with less than 200 genes; remaining ", ncol(rawmat), " cells", sep=""))
}
##
der<- apply(rawmat,1,function(x)(sum(x>0)))/ncol(rawmat);
if(sum(der>LOW.DR)>=1){
rawmat <- rawmat[which(der > LOW.DR), ]; print(paste(nrow(rawmat)," genes past LOW.DR filtering", sep=""))
}
WNS1 <- "data quality is ok"
if(nrow(rawmat) < 8000){
WNS1 <- "low data quality"
UP.DR<- LOW.DR
print("WARNING: low data quality; assigned LOW.DR to UP.DR...")
}
print("step 2: annotations gene coordinates ...")
anno.mat <- annotateGenes.hg20(mat = rawmat, ID.type = id.type) #SYMBOL or ENSEMBLE
### module 3 removing genes that are involved in cell cycling
HLAs <- anno.mat$hgnc_symbol[grep("^HLA-", anno.mat$hgnc_symbol)]
toRev <- which(anno.mat$hgnc_symbol %in% c(as.vector(cyclegenes[[1]]), HLAs))
if(length(toRev)>0){
anno.mat <- anno.mat[-toRev, ]
}
### secondary filtering
ToRemov2 <- NULL
for(i in 8:ncol(anno.mat)){
cell <- cbind(anno.mat$chromosome_name, anno.mat[,i])
cell <- cell[cell[,2]!=0,]
if(length(as.numeric(cell))< 5){
rm <- colnames(anno.mat)[i]
ToRemov2 <- c(ToRemov2, rm)
} else if(length(rle(cell[,1])$length)<23|min(rle(cell[,1])$length)< ngene.chr){
rm <- colnames(anno.mat)[i]
ToRemov2 <- c(ToRemov2, rm)
}
i<- i+1
}
if(length(ToRemov2)==(ncol(anno.mat)-7)) stop("all cells are filtered")
if(length(ToRemov2)>0){
anno.mat <-anno.mat[, -which(colnames(anno.mat) %in% ToRemov2)]
}
rawmat3 <- data.matrix(anno.mat[, 8:ncol(anno.mat)])
norm.mat<- log(sqrt(rawmat3)+sqrt(rawmat3+1))
norm.mat<- apply(norm.mat,2,function(x)(x <- x-mean(x)))
colnames(norm.mat) <-  colnames(rawmat3)
##smooth data
print("step 3: smoothing data with dlm ...")
dlm.sm <- function(c){
model <- dlm::dlmModPoly(order=1, dV=0.16, dW=0.001)
x <- dlm::dlmSmooth(norm.mat[, c], model)$s
x<- x[2:length(x)]
x <- x-mean(x)
}
test.mc <-parallel::mclapply(1:ncol(norm.mat), dlm.sm, mc.cores = n.cores)
norm.mat.smooth <- matrix(unlist(test.mc), ncol = ncol(norm.mat), byrow = FALSE)
colnames(norm.mat.smooth) <- colnames(norm.mat)
print("step 4: measuring baselines ...")
if(length(norm.cell.names)>1){
#print(paste(length(norm.cell.names), "normal cells provided", sep=""))
NNN <- length(colnames(norm.mat.smooth)[which(colnames(norm.mat.smooth) %in% norm.cell.names)])
print(paste(NNN, " known normal cells found in dataset", sep=""))
if (NNN==0) stop("known normal cells providedl; however none existed in testing dataset")
print("run with known normal...")
basel <- apply(norm.mat.smooth[, which(colnames(norm.mat.smooth) %in% norm.cell.names)],1,median); print("baseline is from known input")
d <- parallelDist::parDist(t(norm.mat.smooth),threads =n.cores, method="euclidean") ##use smooth and segmented data to detect intra-normal cells
km <- 6
fit <- hclust(d, method="ward.D2")
CL <- cutree(fit, km)
while(!all(table(ct)>min.cells)){
km <- km -1
CL <- cutree(fit, k=km)
if(km==2){
break
}
}
WNS <- "run with known normal"
preN <- norm.cell.names
}else {
basa <- baseline.GMM(CNA.mat=norm.mat.smooth, max.normal=20, mu.cut=0.05, Nfraq.cut=0.95)
if (length(basa$preN) >= 20){
basel <- basa$basel
WNS <- basa$WNS
preN <- basa$preN
CL <- basa$cl
} else {
basa <- baseline.norm.cl(norm.mat.smooth=norm.mat.smooth, min.cells=5, n.cores=n.cores)
basel <-basa$basel
WNS <- basa$WNS
preN <- basa$preN
CL <- basa$cl
}
}
basa <- baseline.GMM(CNA.mat=norm.mat.smooth, max.normal=20, mu.cut=0.05, Nfraq.cut=0.95)
length(basa$preN) >= 20
basel <- basa$basel
WNS <- basa$WNS
preN <- basa$preN
CL <- basa$cl
###use a smaller set of genes to perform segmentation
DR2 <- apply(rawmat3,1,function(x)(sum(x>0)))/ncol(rawmat3)
##relative expression using pred.normal cells
norm.mat.relat <- norm.mat.smooth-basel  ####
norm.mat.relat <- norm.mat.relat[which(DR2>=UP.DR),]
UP.DR
DR2
which(DR2>=UP.DR)
dim(norm.mat.relat)
dim(norm.mat.smooth)
dim(basel)
basel
length(basel)
basa
source('~/Desktop/creat_copycat_pkg/copycat/R/baseline.GMM.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/baseline.GMM.R')
basa <- baseline.GMM(CNA.mat=norm.mat.smooth, max.normal=20, mu.cut=0.05, Nfraq.cut=0.95)
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/baseline.GMM.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/baseline.GMM.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
basa <- baseline.GMM(CNA.mat=norm.mat.smooth, max.normal=15, mu.cut=0.05, Nfraq.cut=0.95)
basa
length(basa$preN) == 15
basel <- basa$basel
WNS <- basa$WNS
preN <- basa$preN
CL <- basa$cl
###use a smaller set of genes to perform segmentation
DR2 <- apply(rawmat3,1,function(x)(sum(x>0)))/ncol(rawmat3)
##relative expression using pred.normal cells
norm.mat.relat <- norm.mat.smooth-basel  ####
length(basel)
norm.mat.relat <- norm.mat.relat[which(DR2>=UP.DR),]
###filter cells
anno.mat2 <- anno.mat[which(DR2>=UP.DR), ]
ToRemov3 <- NULL
for(i in 8:ncol(anno.mat2)){
cell <- cbind(anno.mat2$chromosome_name, anno.mat2[,i])
cell <- cell[cell[,2]!=0,]
if(length(as.numeric(cell))< 5){
rm <- colnames(anno.mat2)[i]
ToRemov3 <- c(ToRemov3, rm)
} else if(length(rle(cell[,1])$length)<23|min(rle(cell[,1])$length)< ngene.chr){
rm <- colnames(anno.mat2)[i]
ToRemov3 <- c(ToRemov3, rm)
}
i<- i+1
}
if(length(ToRemov3)==ncol(norm.mat.relat)) stop ("all cells are filtered")
if(length(ToRemov3)>0){
norm.mat.relat <-norm.mat.relat[, -which(colnames(norm.mat.relat) %in% ToRemov3)]
# print(paste("filtered out ", length(ToRemov3), " cells with less than ",ngene.chr, " genes per chr", sep=""))
}
CL <- CL[which(names(CL) %in% colnames(norm.mat.relat))]
CL <- CL[order(match(names(CL), colnames(norm.mat.relat)))]
results <- CNA.MCMC(clu=CL, fttmat=norm.mat.relat, bins=win.size, cut.cor = KS.cut, n.cores=n.cores)
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
devtools::load_all(".")
results <- CNA.MCMC(clu=CL, fttmat=norm.mat.relat, bins=win.size, cut.cor = KS.cut, n.cores=n.cores)
source('~/Desktop/creat_copycat_pkg/copycat/R/CNA.MCMC.R')
results <- CNA.MCMC(clu=CL, fttmat=norm.mat.relat, bins=win.size, cut.cor = KS.cut, n.cores=n.cores)
source('~/Desktop/creat_copycat_pkg/copycat/R/CNA.MCMC.R')
results <- CNA.MCMC(clu=CL, fttmat=norm.mat.relat, bins=win.size, cut.cor = KS.cut, n.cores=n.cores)
print("segmentation time")
length(results$breaks)<25
results <- CNA.MCMC(clu=CL, logmat=norm.mat.relat, bins=win.size, cut.cor = 0.5*KS.cut, n.cores=n.cores)
results <- CNA.MCMC(clu=CL, fttmat=norm.mat.relat, bins=win.size, cut.cor = 0.5*KS.cut, n.cores=n.cores)
length(results$breaks)<25
colnames(results$logCNA) <- colnames(norm.mat.relat)
results.com <- apply(results$logCNA,2, function(x)(x <- x-mean(x)))
RNA.copycat <- cbind(anno.mat2[, 1:7], results.com)
print("step 6: convert to genomic bins...") ###need multi-core
Aj <- convert.all.bins(DNA.mat = DNA.hg20, RNA.mat=RNA.copycat, n.cores = n.cores)
source('~/Desktop/creat_copycat_pkg/copycat/R/convert.bins.keepAllbins.hg38.R')
n.cores
source('~/Desktop/creat_copycat_pkg/copycat/R/convert.bins.keepAllbins.hg38.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/convert.all.bins.hg20.R')
Aj <- convert.all.bins.hg20(DNA.mat = DNA.hg20, RNA.mat=RNA.copycat, n.cores = n.cores)
source('~/Desktop/creat_copycat_pkg/copycat/R/convert.all.bins.hg20.R')
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
Aj <- convert.all.bins.hg20(DNA.mat = DNA.hg20, RNA.mat=RNA.copycat, n.cores = n.cores)
uber.mat.adj <- data.matrix(Aj$RNA.adj[, 4:ncol(Aj$RNA.adj)])
print("step 7: adjust baseline ...")
################removed baseline adjustment
hcc <- hclust(parallelDist::parDist(t(uber.mat.adj),threads =n.cores, method = "euclidean"), method = "ward.D2")
hc.umap <- cutree(hcc,2)
names(hc.umap) <- colnames(results.com)
cl.ID <- NULL
for(i in 1:max(hc.umap)){
cli <- names(hc.umap)[which(hc.umap==i)]
pid <- length(intersect(cli, preN))/length(cli)
cl.ID <- c(cl.ID, pid)
i<- i+1
}
com.pred <- names(hc.umap)
com.pred[which(hc.umap == which(cl.ID==max(cl.ID)))] <- "diploid"
com.pred[which(hc.umap == which(cl.ID==min(cl.ID)))] <- "nondiploid"
names(com.pred) <- names(hc.umap)
################removed baseline adjustment
results.com.rat <- uber.mat.adj-apply(uber.mat.adj[,which(com.pred=="diploid")], 1, mean)
results.com.rat <- apply(results.com.rat,2,function(x)(x <- x-mean(x)))
results.com.rat.norm <- results.com.rat[,which(com.pred=="diploid")]; dim(results.com.rat.norm)
cf.h <- apply(results.com.rat.norm, 1, sd)
base <- apply(results.com.rat.norm, 1, mean)
adjN <- function(j){
a <- results.com.rat[, j]
a[abs(a-base) <= 0.25*cf.h] <- mean(a)
a
}
mc.adjN <-  parallel::mclapply(1:ncol(results.com.rat),adjN, mc.cores = n.cores)
adj.results <- matrix(unlist(mc.adjN), ncol = ncol(results.com.rat), byrow = FALSE)
colnames(adj.results) <- colnames(results.com.rat)
rang <- 0.5*(max(adj.results)-min(adj.results))
mat.adj <- adj.results/rang
print("step 8: final prediction ...")
hcc <- hclust(parallelDist::parDist(t(mat.adj),threads =n.cores, method = "euclidean"), method = "ward.D2")
#hcc <- hclust(as.dist(1-cor(mat.adj, method = "spearman")), method = "ward.D2")
hc.umap <- cutree(hcc,2)
names(hc.umap) <- colnames(results.com)
saveRDS(hcc, file = paste(sample.name,"clustering_results.rda",sep=""))
getwd()
cl.ID <- NULL
for(i in 1:max(hc.umap)){
cli <- names(hc.umap)[which(hc.umap==i)]
pid <- length(intersect(cli, preN))/length(cli)
cl.ID <- c(cl.ID, pid)
i<- i+1
}
com.preN <- names(hc.umap)
com.preN[which(hc.umap == which(cl.ID==max(cl.ID)))] <- "diploid"
com.preN[which(hc.umap == which(cl.ID==min(cl.ID)))] <- "nondiploid"
names(com.preN) <- names(hc.umap)
table(com.preN)
if(WNS=="unclassified.prediction"){
com.preN[which(com.preN == "diploid")] <- "c1:low.confidence"
com.preN[which(com.preN == "nondiploid")] <- "c2:low.confidence"
}
print("step 9: saving results...")
res <- cbind(names(com.preN), com.preN)
com.preN <- names(hc.umap)
com.preN[which(hc.umap == which(cl.ID==max(cl.ID)))] <- "diploid"
com.preN[which(hc.umap == which(cl.ID==min(cl.ID)))] <- "aneuploid"
names(com.preN) <- names(hc.umap)
res <- cbind(names(com.preN), com.preN)
colnames(res) <- c("cell.names", "copykat.pred")
write.table(res, paste(sample.name, "prediction.txt",sep=""), sep="\t", row.names = FALSE, quote = F)
####save copycat CNA
write.table(cbind(Aj$RNA.adj[, 1:3], mat.adj), paste(sample.name, "CNA_results.txt", sep=""), sep="\t", row.names = FALSE, quote = F)
my_palette <- colorRampPalette(rev(RColorBrewer::brewer.pal(n = 3, name = "RdBu")))(n = 999)
chr <- as.numeric(Aj$DNA.adj$chrom) %% 2+1
rbPal1 <- colorRampPalette(c('black','grey'))
CHR <- rbPal1(2)[as.numeric(chr)]
chr1 <- cbind(CHR,CHR)
rbPal5 <- colorRampPalette(RColorBrewer::brewer.pal(n = 8, name = "Dark2")[2:1])
compreN_pred <- rbPal5(2)[as.numeric(factor(com.preN))]
cells <- rbind(compreN_pred,compreN_pred)
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
devtools::load_all(".")
library(copycat)
copycat.test <- copycat(rawmat=exp.rawdata, id.type="S", ngene.chr=5, win.size=25, KS.cut=0.3, sam.name="test", n.cores=4)
```{r, eval=FALSE, message=FALSE}
devtools::load_all(".")
source('~/Desktop/creat_copycat_pkg/copycat/R/copycat.R')
source('~/Desktop/creat_copycat_pkg/copykat/R/heatmap.3.R')
source('~/Desktop/creat_copycat_pkg/copykat/R/annotateGenes.hg20.R')
source('~/Desktop/creat_copycat_pkg/copykat/R/baseline.GMM.R')
devtools::load_all(".")
